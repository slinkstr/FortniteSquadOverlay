; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#include "CodeDependencies.iss"

#define MyAppName       "FortniteSquadOverlay"
#define MyAppNameSpaced "Fortnite Squad Overlay"
#define MyAppVersion    "1.8.2"
#define MyAppPublisher  "slinkstr"
#define MyAppURL        "https://github.com/slinkstr/FortniteSquadOverlay"
#define MyAppExeName    "FortniteSquadOverlayClient.exe"

[Setup]
ArchitecturesAllowed=x64compatible
ArchitecturesInstallIn64BitMode=x64compatible

; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{F0360C1C-C40A-4D71-81EA-3FC09C883B35}
AppName={#MyAppNameSpaced}
AppVersion={#MyAppVersion}
VersionInfoVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
Compression=lzma
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
OutputDir=.
OutputBaseFilename={#MyAppName}-Installer-{#MyAppVersion}
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=commandline
SetupIconFile=..\src\FortniteSquadOverlayClient\FortniteOverlay.ico
SolidCompression=yes
UninstallDisplayIcon={app}\{#MyAppExeName}
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "..\src\FortniteSquadOverlayClient\bin\Release\net9.0-windows\win-x64\publish\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppNameSpaced}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppNameSpaced}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall

[InstallDelete]
Type: filesandordirs; Name: "{app}\*"

[UninstallDelete]
Type: files; Name: "{userstartup}\{#MyAppExeName}.lnk"

[Code]
function InstallDependencies: Boolean;
begin
  Dependency_AddDotNet90Desktop;
  Dependency_AddDotNet90Asp

  Result := True;
end;

function UninstallFromRegKey(const RootKey: Integer; const SubKeyName: String): Integer;
var
  queryResult: String;
  resultCode: Integer;
begin
  if RegQueryStringValue(RootKey, SubKeyName, 'UninstallString', queryResult) then
  begin
    Exec(RemoveQuotes(queryResult), '', '', SW_SHOWNORMAL, ewWaitUntilTerminated, resultCode);
  end;
  Log('queryResult: ' + queryResult);
  Log('resultCode: ' + IntToStr(resultCode));
  Result := resultCode;
end;

procedure UninstallOldVersions();
begin
  //UninstallFromRegKey(HKCU, ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1')); // user install
  //UninstallFromRegKey(HKLM, ExpandConstant('SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1')); // x64
  UninstallFromRegKey(HKLM, ExpandConstant('SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1')); // x32
end;

function InitializeSetup: Boolean;
begin
  InstallDependencies();
  UninstallOldVersions();
  Result := True;
end;